<?php

require __DIR__ . '/vendor/autoload.php';
require __DIR__ . '/vendor/yiisoft/yii2/Yii.php';

$config = require __DIR__ . '/config/console.php';
new yii\console\Application($config);

use app\models\{Vacancy, VacancySkill};

echo "=== –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ ===\n\n";

$vacancy = Vacancy::findOne(1);

if ($vacancy) {
    echo "üìã –í–∞–∫–∞–Ω—Å–∏—è: {$vacancy->title} (ID: {$vacancy->id})\n";
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏
    echo "\nüõ†Ô∏è  –¢–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏ –≤ –ë–î:\n";
    $currentSkills = VacancySkill::find()->where(['vacancy_id' => $vacancy->id])->with('skill')->all();
    foreach ($currentSkills as $vs) {
        echo "  ID {$vs->skill_id}: {$vs->skill->name} (required: " . ($vs->required ? 'true' : 'false') . ", level: " . ($vs->level ?: 'null') . ")\n";
    }
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    $testSkillsData = [
        [
            "id" => 1,
            "required" => true,
            "level" => "senior"
        ],
        [
            "id" => 2,
            "required" => false,
            "level" => "middle"
        ],
        [
            "id" => 3,
            "required" => true,
            "level" => null
        ]
    ];
    
    echo "\nüìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n";
    foreach ($testSkillsData as $skill) {
        $req = isset($skill['required']) ? ($skill['required'] ? 'true' : 'false') : '–Ω–µ —É–∫–∞–∑–∞–Ω';
        $level = $skill['level'] ?? 'null';
        echo "  ID {$skill['id']}: required={$req}, level={$level}\n";
    }
    
    echo "\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º updateRelatedData...\n";
    
    // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    $transaction = $vacancy->getDb()->beginTransaction();
    try {
        echo "  1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–≤—ã–∫–∏...\n";
        $deletedCount = VacancySkill::deleteAll(['vacancy_id' => $vacancy->id]);
        echo "     –£–¥–∞–ª–µ–Ω–æ: {$deletedCount} –∑–∞–ø–∏—Å–µ–π\n";
        
        echo "  2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏...\n";
        foreach ($testSkillsData as $skillData) {
            $skillId = $skillData['id'];
            $required = $skillData['required'] ?? false;
            $level = $skillData['level'] ?? null;
            
            echo "     –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫ ID {$skillId}: required=" . ($required ? 'true' : 'false') . ", level=" . ($level ?: 'null') . "\n";
            
            $vacancySkill = new VacancySkill([
                'vacancy_id' => $vacancy->id,
                'skill_id' => $skillId,
                'required' => $required,
                'level' => $level,
            ]);
            
            if ($vacancySkill->save()) {
                echo "       ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n";
            } else {
                echo "       ‚ùå –û—à–∏–±–∫–∞: " . implode(', ', $vacancySkill->getFirstErrors()) . "\n";
            }
        }
        
        $transaction->commit();
        echo "  3. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n";
        
    } catch (Exception $e) {
        $transaction->rollBack();
        echo "  ‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {$e->getMessage()}\n";
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    echo "\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î:\n";
    $updatedSkills = VacancySkill::find()->where(['vacancy_id' => $vacancy->id])->with('skill')->all();
    foreach ($updatedSkills as $vs) {
        echo "  ID {$vs->skill_id}: {$vs->skill->name} (required: " . ($vs->required ? 'true' : 'false') . ", level: " . ($vs->level ?: 'null') . ")\n";
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API response
    echo "\nüì± API Response –Ω–∞–≤—ã–∫–∏:\n";
    $vacancy->refresh();
    $vacancy = Vacancy::find()->with(['skills'])->where(['id' => 1])->one();
    $apiSkills = $vacancy->toArray([], ['skills'])['skills'] ?? [];
    
    foreach ($apiSkills as $skill) {
        echo "  {$skill['name']}: –¥–∞–Ω–Ω—ã–µ –≤ API response\n";
        echo json_encode($skill, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . "\n";
    }
    
} else {
    echo "‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
}

echo "\n=== –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===\n";
